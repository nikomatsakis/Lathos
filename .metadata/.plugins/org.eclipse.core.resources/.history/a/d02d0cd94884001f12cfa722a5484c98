package com.smallcultfollowing.lathos.context;

import java.util.LinkedList;

import com.smallcultfollowing.lathos.model.Page;
import com.smallcultfollowing.lathos.server.Breadcrumbs;
import com.smallcultfollowing.lathos.server.UserPage;

public class DefaultContext implements Context {
	
	private final LinkedList<Breadcrumbs> trails = new LinkedList<Breadcrumbs>();
	private final Thread owner = Thread.currentThread();
	
	private final void checkThread() {
		assert(Thread.currentThread() == owner);		
	}

	@Override
	public Page pushChild(Object... title) {
		checkThread();
		
		Page page = new UserPage(freshId());
		
		if(!trails.isEmpty()) {
			trails.getLast().page.addContent(page);
			Breadcrumbs newTrail = new Breadcrumbs(page, trails.getLast());
			page.addContent(newTrail);
			trails.add(newTrail);
		} else {
			Breadcrumbs newTrail = new Breadcrumbs(page, null);
			trails.add(newTrail);
		}
		
		return null;
	}

	@Override
	public void push(Page page) {
		checkThread();
	}

	@Override
	public void embedIn(Page page) {
		checkThread();
	}

	@Override
	public void log(Object... line) {
		checkThread();
	}

	@Override
	public void append(Object... line) {
		checkThread();
	}

	@Override
	public void pop(Page page) {
		checkThread();
		
		if(page != null) {
			if(trails.getLast().page != page)
				throw new RuntimeException(
						"Popping %s but passed in %s", 
						trails.getLast().page,
						page);
		}
		
		trails.removeLast();
	}

	@Override
	public String freshId() {
		return null;
	}

}
