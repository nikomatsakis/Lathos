package com.smallcultfollowing.lathos.server;

import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import com.smallcultfollowing.lathos.context.AbstractContext;
import com.smallcultfollowing.lathos.context.Context;
import com.smallcultfollowing.lathos.model.DataRenderer;
import com.smallcultfollowing.lathos.model.Page;
import com.smallcultfollowing.lathos.model.PageContent;
import com.smallcultfollowing.lathos.model.Server;

public class WebServer
implements Server 
{
	private final AtomicInteger id = new AtomicInteger();
	private final Map<String, List<Page>> topLevelPages = new HashMap<String, List<Page>>();
	private final DataRenderer[] customDataRenderers = new DataRenderer[0];
	
	@Override
	public synchronized void addTopLevelPage(Page page) {
		List<Page> list = topLevelPages.get(page.getId());
		if(list == null) {
			list = new LinkedList<Page>();
			topLevelPages.put(page.getId(), list);
		}
		if(!list.contains(page))
			list.add(page);
	}
	
	@Override
	public String freshId() {
		int i = id.getAndIncrement();
		return "page" + Integer.toHexString(i);
	}
	
	public void renderError(String url, String desc, Object... args) {
		
	}
	
	public String url(Page page) {
		StringBuilder sb = new StringBuilder();
		addURL(page, sb);
		return sb.toString();
	}
	
	private void addURL(Page page, StringBuilder sb) {
		if(page.getParent() != null) {
			addURL(page.getParent(), sb);
			sb.append("/");
		}
		
		try {
			sb.append(URLEncoder.encode(page.getId(), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}

	public synchronized void renderURL(String url, Writer out) {
		String[] ids = url.split("/");
		
		if(ids.length == 0) {
			renderError(url, "Empty URL");
			return;
		}
		
		for(int i = 0; i < ids.length; i++) {
			try {
				ids[i] = URLDecoder.decode(ids[i], "UTF-8");
			} catch (UnsupportedEncodingException e) {
				renderError(url, "Id #%d (%s) contains invalid characters: %s", i+1, ids[i], e.toString());
				return;
			}
		}
		
		List<Page> pages = topLevelPages.get(ids[0]);
		for(int nextIndex = 1; nextIndex < ids.length; nextIndex++) {
			if(pages == null || pages.size() == 0) {
				renderError(url, "Id #%d (%s) yields no pages.", nextIndex, ids[nextIndex - 1]);
				return;
			}
			
			List<Page> newPages = new LinkedList<Page>();
			for(Page page : pages) {
				for(PageContent content : page.contents()) {
					if(content instanceof Page) {
						Page subPage = (Page) content;
						if(subPage.getId().equals(ids[nextIndex]))
							newPages.add(subPage);
					}
				}
			}
			
			pages = newPages;
		}
		
		HtmlOutput output = new HtmlOutput(this, pages, out);
		
		for(Page page : pages) {
			page.render(output);
		}
	}

	@Override
	public Context context() {
		return new AbstractContext(this);
	}
	
}
